<?xml version="1.0"?>

<!--
	This is a clone of 'ctr_oldsearch.xml' with only one difference:
    inside xul:textbox
				autocompletepopup="PopupAutoComplete"
	was repaced by	
				autocompletepopup="PopupSearchAutoComplete"
	to use default searches popup as base.
-->

<!DOCTYPE bindings [
<!ENTITY % searchBarDTD SYSTEM "chrome://browser/locale/searchbar.dtd" >
%searchBarDTD;
<!ENTITY % browserDTD SYSTEM "chrome://browser/locale/browser.dtd">
%browserDTD;
]>

<bindings id="SearchBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="searchbar">
    <resources>
      <stylesheet src="chrome://browser/content/search/searchbarBindings.css"/>
      <stylesheet src="chrome://browser/skin/searchbar.css"/>
    </resources>
    <content>
      <xul:stringbundle src="chrome://browser/locale/search.properties"
                        anonid="searchbar-stringbundle"/>

      <xul:textbox class="searchbar-textbox"
                   anonid="searchbar-textbox"
                   type="autocomplete"
                   flex="1"
                   autocompletepopup="PopupSearchAutoComplete"
                   autocompletesearch="search-autocomplete"
                   autocompletesearchparam="searchbar-history"
                   maxrows="10"
                   completeselectedindex="true"
                   showcommentcolumn="true"
                   tabscrolling="true"
                   xbl:inherits="disabled,disableautocomplete,searchengine,src,newlines">

        <xul:box>
          <xul:toolbarbutton class="searchbar-engine-button"
                      type="menu"
                      anonid="searchbar-engine-button">
            <xul:image class="searchbar-engine-image" xbl:inherits="src"/>
            <xul:image class="searchbar-dropmarker-image"/>
            <xul:menupopup class="searchbar-popup"
                           anonid="searchbar-popup">
              <xul:menuseparator/>
              <xul:menuitem class="open-engine-manager"
                            anonid="open-engine-manager"
                            label="&cmd_engineManager.label;"
                            oncommand="openManager(event);"/>
            </xul:menupopup>
          </xul:toolbarbutton>
        </xul:box>
        <xul:hbox class="search-go-container">
          <xul:image class="search-go-button"
                     anonid="search-go-button"
                     onclick="handleSearchCommand(event);"
                     tooltiptext="&searchEndCap.label;"/>
        </xul:hbox>
      </xul:textbox>
    </content>

    <implementation implements="nsIObserver">
      <constructor><![CDATA[

        if (this.parentNode.parentNode.localName == "toolbarpaletteitem")
          return;
        // Make sure we rebuild the popup in onpopupshowing
        this._needToBuildPopup = true;

        var os = Components.classes["@mozilla.org/observer-service;1"]
                    .getService(Components.interfaces.nsIObserverService);
        os.addObserver(this, "browser-search-engine-modified", false);

        this._initialized = true;

        this.searchService.init((function search_init_cb(aStatus) {
          // Bail out if the binding's been destroyed
          if (!this._initialized)
            return;

          if (Components.isSuccessCode(aStatus)) {
            // Refresh the display (updating icon, etc)
            this.updateDisplay();
          } else {
            Components.utils.reportError("Cannot initialize search service, bailing out: " + aStatus);
          }
        }).bind(this));
      ]]></constructor>

      <destructor><![CDATA[
        this.destroy();
      ]]></destructor>

      <method name="destroy">
        <body><![CDATA[
        if (this._initialized) {
          this._initialized = false;

          var os = Components.classes["@mozilla.org/observer-service;1"]
                             .getService(Components.interfaces.nsIObserverService);
          os.removeObserver(this, "browser-search-engine-modified");
        }

        if (this._textboxInitialized && this._textbox.mController.input == this)
          this._textbox.mController.input = null;
        ]]></body>
      </method>
	  
	  <!-- 'openSuggestionsPanel' method will always be triggered by Fx, if ALT key + Up/Down
		gets hit, no matter whether the search bar binding gets overriden or not. In this case
		the search engine buttons menupopup has to be opened instead of the search panel, because
		this CTR option 'restores' it.
	  -->

      <field name="_stringBundle">document.getAnonymousElementByAttribute(this,
          "anonid", "searchbar-stringbundle");</field>
      <field name="_textboxInitialized">false</field>
      <field name="_textbox">document.getAnonymousElementByAttribute(this,
          "anonid", "searchbar-textbox");</field>
      <field name="_popup">document.getAnonymousElementByAttribute(this,
          "anonid", "searchbar-popup");</field>
      <field name="_ss">null</field>
      <field name="_engines">null</field>
      <field name="FormHistory" readonly="true">
        (Components.utils.import("resource://gre/modules/FormHistory.jsm", {})).FormHistory;
      </field>
      <field name="PlacesUtils" readonly="true">
        (Components.utils.import("resource://gre/modules/PlacesUtils.jsm", {})).PlacesUtils;
      </field>

      <property name="engines" readonly="true">
        <getter><![CDATA[
          if (!this._engines)
            this._engines = this.searchService.getVisibleEngines();
          return this._engines;		
        ]]></getter>
      </property>

      <field name="searchButton">document.getAnonymousElementByAttribute(this,
          "anonid", "searchbar-engine-button");</field>

      <property name="currentEngine">
        <setter><![CDATA[
          let ss = this.searchService;
          ss.defaultEngine = ss.currentEngine = val;
          return val;
        ]]></setter>
        <getter><![CDATA[
          var currentEngine = this.searchService.currentEngine;
          // Return a dummy engine if there is no currentEngine
          return currentEngine || {name: "", uri: null};
        ]]></getter>
      </property>

      <property name="textbox" readonly="true"
                onget="return this._textbox;"/>

      <property name="searchService" readonly="true">
        <getter><![CDATA[
          if (!this._ss) {
            const nsIBSS = Components.interfaces.nsIBrowserSearchService;
            this._ss =
                 Components.classes["@mozilla.org/browser/search-service;1"]
                           .getService(nsIBSS);
          }
          return this._ss;
        ]]></getter>
      </property>

      <property name="value" onget="return this._textbox.value;"
                             onset="return this._textbox.value = val;"/>

      <method name="focus">
        <body><![CDATA[
          this._textbox.focus();
        ]]></body>
      </method>

      <method name="select">
        <body><![CDATA[
          this._textbox.select();
        ]]></body>
      </method>

      <method name="observe">
        <parameter name="aEngine"/>
        <parameter name="aTopic"/>
        <parameter name="aVerb"/>
        <body><![CDATA[
          if (aTopic == "browser-search-engine-modified") {
            switch (aVerb) {
            case "engine-removed":
              this.offerNewEngine(aEngine);
              break;
            case "engine-added":
              this.hideNewEngine(aEngine);
              break;
            case "engine-current":
              // The current engine was changed.  Rebuilding the menu appears to
              // confuse its idea of whether it should be open when it's just
              // been clicked, so we force it to close now.
              this._popup.hidePopup();
              break;
            case "engine-changed":
              // An engine was removed (or hidden) or added, or an icon was
              // changed.  Do nothing special.
            }

            // Make sure the engine list is refetched next time it's needed
            this._engines = null;
			
            // Rebuild the popup and update the display after any modification.
            this.rebuildPopup();
            this.updateDisplay();
          }

        ]]></body>
      </method>

      <method name="offerNewEngine">
        <parameter name="aEngine"/>
        <body><![CDATA[
          for (let browser of gBrowser.browsers) {
            if (browser.hiddenEngines) {

              var removeTitle = aEngine.wrappedJSObject.name;
              for (var i = 0; i < browser.hiddenEngines.length; i++) {
                if (browser.hiddenEngines[i].title == removeTitle) {
                  if (!browser.engines)
                    browser.engines = [];
                  browser.engines.push(browser.hiddenEngines[i]);
                  browser.hiddenEngines.splice(i, 1);
                  break;
                }
              }
            }
          }
          BrowserSearch.updateSearchButton();
        ]]></body>
      </method>

      <method name="hideNewEngine">
        <parameter name="aEngine"/>
        <body><![CDATA[
          for (let browser of gBrowser.browsers) {
            if (browser.engines) {

              var removeTitle = aEngine.wrappedJSObject.name;
              for (var i = 0; i < browser.engines.length; i++) {
                if (browser.engines[i].title == removeTitle) {
                  if (!browser.hiddenEngines)
                    browser.hiddenEngines = [];
                  browser.hiddenEngines.push(browser.engines[i]);
                  browser.engines.splice(i, 1);
                  break;
                }
              }
            }
          }
          BrowserSearch.updateSearchButton();
        ]]></body>
      </method>

      <method name="setIcon">
        <parameter name="element"/>
        <parameter name="uri"/>
        <body><![CDATA[
          if (uri) {
            //uri = this.PlacesUtils.getImageURLForResolution(window, uri);
          }
          element.setAttribute("src", uri);
        ]]></body>
      </method>

      <method name="updateDisplay">
        <body><![CDATA[
          var uri = this.currentEngine.iconURI;
          this.setIcon(this, uri ? uri.spec : "");

          var name = this.currentEngine.name;
          var text = this._stringBundle.getFormattedString("searchtip", [name]);

          this._textbox.placeholder = name;

          this._textbox.label = text;
          this._textbox.tooltipText = text;
        ]]></body>
      </method>

      <method name="rebuildPopupDynamic">
        <body><![CDATA[
          this.rebuildPopup();

          var popup = this._popup;

          var items = popup.childNodes;
          for (var i = items.length - 1; i >= 0; i--) {
            if (items[i].classList.contains("addengine-item") ||
                items[i].classList.contains("addengine-separator"))
              popup.removeChild(items[i]);
          }
		  
		  var searchtextbox = document.getAnonymousElementByAttribute(document.getElementById("searchbar"), "anonid", "searchbar-textbox");
		  var isRTL = getComputedStyle(searchtextbox, "").direction == "rtl";
		  var outerRect = searchtextbox.getBoundingClientRect();
		  var innerRect = searchtextbox.inputField.getBoundingClientRect();
		  
		  if(Services.prefs.getBranch("extensions.classicthemerestorer.").getBoolPref("osearch_iwidth")) {
			  var width = 100;
		  
			  width = isRTL ? Math.round(outerRect.left - outerRect.right) : Math.round(outerRect.right - outerRect.left);

			  popup.setAttribute("width", width > 100 ? width : 100);

		  }

          var addengines = gBrowser.selectedBrowser.engines;
		  	  
          if (addengines && addengines.length > 0) {
            const kXULNS =
               "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";

            // Find the (first) separator in the remaining menu, or the first item
            // if no separators are present.
            var insertLocation = popup.firstChild;
            while (insertLocation.nextSibling &&
                   insertLocation.localName != "menuseparator") {
              insertLocation = insertLocation.nextSibling;
            }
            if (insertLocation.localName != "menuseparator")
              insertLocation = popup.firstChild;

            var separator = document.createElementNS(kXULNS, "menuseparator");
            separator.setAttribute("class", "addengine-separator");
            popup.insertBefore(separator, insertLocation);

            // Insert the "add this engine" items.
            for (var i = 0; i < addengines.length; i++) {
              var menuitem = document.createElement("menuitem");
              var engineInfo = addengines[i];
              var labelStr =
                  this._stringBundle.getFormattedString("cmd_addFoundEngine",
                                                        [engineInfo.title]);
              menuitem = document.createElementNS(kXULNS, "menuitem");
              menuitem.setAttribute("class", "menuitem-iconic addengine-item");
              menuitem.setAttribute("label", labelStr);
              menuitem.setAttribute("tooltiptext", engineInfo.uri);
              menuitem.setAttribute("uri", engineInfo.uri);
              if (engineInfo.icon)
                this.setIcon(menuitem, engineInfo.icon);
              menuitem.setAttribute("title", engineInfo.title);
              popup.insertBefore(menuitem, insertLocation);
            }
          }
        ]]></body>
      </method>

      <method name="rebuildPopup">
        <body><![CDATA[
          var popup = this._popup;

          // Clear the popup, down to the first separator
          while (popup.firstChild && popup.firstChild.localName != "menuseparator")
            popup.removeChild(popup.firstChild);

		  const kXULNS =
               "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";

		  try {
			let Preferences =
			  Cu.import("resource://gre/modules/Preferences.jsm", {}).Preferences;
			let pref = Preferences.get("browser.search.hiddenOneOffs");
			let hiddenList = pref ? pref.split(",") : [];

			this._engines = Services.search.getVisibleEngines()
								  .filter(e => hiddenList.indexOf(e.name) == -1);
		  } catch(e){}

          var engines = this.engines;
          for (var i = engines.length - 1; i >= 0; --i) {
            var menuitem = document.createElementNS(kXULNS, "menuitem");
            var name = engines[i].name;
            menuitem.setAttribute("label", name);
            menuitem.setAttribute("class", "menuitem-iconic searchbar-engine-menuitem menuitem-with-favicon");

            if (engines[i] == this.currentEngine)
              menuitem.setAttribute("selected", "true");
            var tooltip = this._stringBundle.getFormattedString("searchtip", [name]);
            menuitem.setAttribute("tooltiptext", tooltip);
            if (engines[i].iconURI)
              this.setIcon(menuitem, engines[i].iconURI.spec);
            popup.insertBefore(menuitem, popup.firstChild);
            menuitem.engine = engines[i];
          }

          this._needToBuildPopup = false;
        ]]></body>
      </method>
	  
      <method name="openManager">
        <parameter name="aEvent"/>
        <body><![CDATA[
			Services.prefs.getBranch('extensions.classicthemerestorer.').setCharPref('aboutprefs','category-search');
			
			if(classicthemerestorerjs.ctr.prefs.getCharPref('altoptions')=='options_win'
			  || classicthemerestorerjs.ctr.prefs.getCharPref('altoptions')=='options_win_alt'){
				classicthemerestorerjs.ctr.openContentPrefsInWin('search');
			} else {
			  openPreferences("paneSearch");
			}
        ]]></body>
      </method>

      <method name="selectEngine">
        <parameter name="aEvent"/>
        <parameter name="isNextEngine"/>
        <body><![CDATA[

          var newIndex = this.engines.indexOf(this.currentEngine);
          newIndex += isNextEngine ? 1 : -1;

          if (newIndex >= 0 && newIndex < this.engines.length) {
            this.currentEngine = this.engines[newIndex];
          }

          aEvent.preventDefault();
          aEvent.stopPropagation();

        ]]></body>
      </method>

      <method name="handleSearchCommand">
        <parameter name="aEvent"/>
        <parameter name="aEngine"/>
        <body><![CDATA[
          var textBox = this._textbox;
          var textValue = textBox.value;

          var where = "current";
		  var newTabPref = Services.prefs.getBranch("browser.search.").getBoolPref("openintab");
		  
		  Components.utils.import("resource://gre/modules/Services.jsm", {});
		  
		  var {NewTabURL} = Components.utils.import("resource:///modules/NewTabURL.jsm", {});
		  var ctr_newtaburl = NewTabURL.get();
		  var ctr_blankpage = "about:blank";
		  var ctr_ahomepage = "about:home";
		  
		  // force search to open in a new tab, if the corresponding browser preference it active
		  try {
			if(newTabPref) {
			  
			  if(!Services.prefs.getBranch("extensions.classicthemerestorer.").getBoolPref("search_ant") &&
				gBrowser.currentURI.spec==ctr_newtaburl)
				  where = "current";
			  else if(!Services.prefs.getBranch("extensions.classicthemerestorer.").getBoolPref("search_abl") &&
				gBrowser.currentURI.spec==ctr_blankpage)
				  where = "current";
			  else if(!Services.prefs.getBranch("extensions.classicthemerestorer.").getBoolPref("search_aho") &&
				gBrowser.currentURI.spec==ctr_ahomepage)
				  where = "current";
			  else where = "tab";
			  
			}
			
		  } catch(e) {}

          // Open ctrl/cmd clicks on one-off buttons in a new background tab.
          if (aEvent && aEvent.originalTarget.getAttribute("anonid") == "search-go-button") {
            if (aEvent.button == 2)
              return;
            
			where = whereToOpenLink(aEvent, false, true);
			
			if (aEvent.button == 1) {
              if(!Services.prefs.getBranch("extensions.classicthemerestorer.").getBoolPref("osearch_meoit2"))
			    where = "tab-background";
			}

          }
          else {
            if ((aEvent instanceof KeyboardEvent) && aEvent.altKey) {
              where = "tab";
			  if(newTabPref) where = "current";
			}
			  
            if ((aEvent instanceof MouseEvent) && (aEvent.button == 1 ||
                                                   aEvent.ctrlKey)) {
              if(Services.prefs.getBranch("extensions.classicthemerestorer.").getBoolPref("osearch_meoit"))
			    where = "tab";
			  else
			    where = "tab-background";
			}
          }
		  
          this.doSearch(textValue, where, aEngine);

          if (where == "tab-background")
            this.focus();

		  // clear input after search
		  if(Services.prefs.getBranch("extensions.classicthemerestorer.").getBoolPref("ctroldsearchc")) {
			if (Services.prefs.getBranch("extensions.classicthemerestorer.").getIntPref("ctrosearchct")!=0) {
		  	  setTimeout(function(){
				textBox.value="";
			  },Services.prefs.getBranch("extensions.classicthemerestorer.").getIntPref("ctrosearchct"));
			} else textBox.value="";
		  }
	  
		  // revent to default engine after search
		  if(Services.prefs.getBranch("extensions.classicthemerestorer.").getBoolPref("ctroldsearchr")) {
		  	if (Services.prefs.getBranch("extensions.classicthemerestorer.").getIntPref("ctrosearchrt")!=0) {
			  setTimeout(function(){
				var ctr_searchservice = Components.classes["@mozilla.org/browser/search-service;1"]
										.getService(Components.interfaces.nsIBrowserSearchService);
				ctr_searchservice.defaultEngine = ctr_searchservice.getVisibleEngines()[0];
			  },Services.prefs.getBranch("extensions.classicthemerestorer.").getIntPref("ctrosearchrt"));
			} else this.currentEngine = this.engines[0];
		  }

        ]]></body>
      </method>

      <method name="doSearch">
        <parameter name="aData"/>
        <parameter name="aWhere"/>
        <parameter name="aEngine"/>
        <body><![CDATA[
          var textBox = this._textbox;
		  
          if(aWhere == "tab-background" && Services.prefs.getBranch("extensions.classicthemerestorer.").getBoolPref("osearch_meoit"))
			aWhere = "tab";

          // Save the current value in the form history
          if (aData && !PrivateBrowsingUtils.isWindowPrivate(window)) {
            this.FormHistory.update(
              { op : "bump",
                fieldname : textBox.getAttribute("autocompletesearchparam"),
                value : aData },
              { handleError : function(aError) {
                  Components.utils.reportError("Saving search to form history failed: " + aError.message);
              }});
          }

          let engine = aEngine || this.currentEngine;
          var submission = engine.getSubmission(aData, null, "searchbar");

          // null parameter below specifies HTML response for search
          let params = {
            postData: submission.postData,
            inBackground: aWhere == "tab-background"
          };

          openUILinkIn(submission.uri.spec,
                       aWhere == "tab-background" ? "tab" : aWhere,
                       params);
        ]]></body>
      </method>
    </implementation>

    <handlers>
      <handler event="command"><![CDATA[
        const target = event.originalTarget;
        if (target.engine) {
          this.currentEngine = target.engine;
        } else if (target.classList.contains("addengine-item")) {
          var searchService =
            Components.classes["@mozilla.org/browser/search-service;1"]
                      .getService(Components.interfaces.nsIBrowserSearchService);
          // We only detect OpenSearch files
          var type = Components.interfaces.nsISearchEngine.DATA_XML;
          // Select the installed engine if the installation succeeds
          var installCallback = {
            onSuccess: engine => this.currentEngine = engine
          }
          searchService.addEngine(target.getAttribute("uri"), type,
                                  target.getAttribute("src"), false,
                                  installCallback);
        }
        else
          return;

        this.focus();
        this.select();
      ]]></handler>

      <handler event="popupshowing" action="this.rebuildPopupDynamic();"/>

      <handler event="DOMMouseScroll"
               phase="capturing"
               modifiers="accel"
               action="this.selectEngine(event, (event.detail > 0));"/>

      <handler event="focus">
      <![CDATA[

        this.currentEngine.speculativeConnect({window: window});
      ]]></handler>
    </handlers>
  </binding>
  
 <binding id="searchbar-textbox"
      extends="chrome://browser/content/search/search.xml#searchbar-textbox">
    <implementation implements="nsIObserver">

      <method name="openPopup">
        <body><![CDATA[
          var popup = this.popup;
          if (!popup.mPopupOpen) {

            popup.hidden = false;

            // Don't roll up on mouse click in the anchor for the search UI.
           /* if (popup.id == "PopupSearchAutoComplete") {
              popup.setAttribute("norolluponanchor", "true");
            }*/

            popup.mInput = this;
            popup.view = this.controller.QueryInterface(Components.interfaces.nsITreeView);
            popup.invalidate();

            popup.showCommentColumn = this.showCommentColumn;
            popup.showImageColumn = this.showImageColumn;

            document.popupNode = null;
			
			var isRTL = getComputedStyle(this, "").direction == "rtl";
            var outerRect = this.getBoundingClientRect();
            var innerRect = this.inputField.getBoundingClientRect();
		
			if(Services.prefs.getBranch("extensions.classicthemerestorer.").getBoolPref("osearch_iwidth")) {
			
				var width = 100;
				
				width = isRTL ? Math.round(outerRect.left - outerRect.right) : Math.round(outerRect.right - outerRect.left);

				if(Services.appinfo.OS=="Darwin") {
				  width = width - 1; // MacOSX
				}
				
				popup.setAttribute("width", width > 100 ? width : 100);

			} else {
				if (isRTL) {
				  var width = innerRect.right - outerRect.left;
				} else {
				  var width = outerRect.right - innerRect.left;
				}
				popup.setAttribute("width", width > 100 ? width : 100);
			}

            popup.openPopup(this, "after_start", 0, -1, false, false);
          }
        ]]></body>
      </method>

      <method name="openSearch">
        <body>
          <![CDATA[
            // Don't open search popup if history popup is open
            if (!this.popupOpen) {
              let searchBox = document.getBindingParent(this);
              searchBox.searchButton.open = true;
              return false;
            }
            return true;
          ]]>
        </body>
      </method>

	</implementation>
	
    <handlers>
      <handler event="keypress" keycode="VK_DOWN" modifiers="alt"
               phase="capturing"
               action="return this.openSearch();"/>

      <handler event="keypress" keycode="VK_UP" modifiers="alt"
               phase="capturing"
               action="return this.openSearch();"/>

      <handler event="keypress" keycode="VK_F4"
               phase="capturing"
               action="return this.openSearch();"/>
			   
      <handler event="click"><![CDATA[
        if (event.button == 2)
          return; // ignore right clicks.
		else if (event.button == 1) { // middle click

          let button = event.originalTarget;
          let engine = button.engine || button.parentNode.engine;

          if (!engine) return;

          let searchbar = document.getElementById("searchbar");
		  searchbar.searchButton.open = false;
          searchbar.handleSearchCommand(event, engine);
		}
      ]]></handler>

    </handlers>

  </binding>

</bindings>
