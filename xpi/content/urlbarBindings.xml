<?xml version="1.0"?>

<!--
 Modified Firefox 48+ bindings offered in
 chrome://global/content/bindings/autocomplete.xml#autocomplete-rich-result-popup
 and
 chrome://browser/content/urlbarBindings.xml#urlbar-rich-result-popup
 to simulate pre-Fx48 look of location bars autocomplete popup.
 Removed all default comments to reduce file size. 
-->

<!DOCTYPE bindings [
<!ENTITY % notificationDTD SYSTEM "chrome://global/locale/notification.dtd">
%notificationDTD;
<!ENTITY % browserDTD SYSTEM "chrome://browser/locale/browser.dtd">
%browserDTD;
<!ENTITY % brandDTD SYSTEM "chrome://branding/locale/brand.dtd">
%brandDTD;
]>

<bindings id="urlbarBindings" xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">
		  
  <binding id="urlbar-rich-result-popup" extends="chrome://browser/content/urlbarBindings.xml#urlbar-rich-result-popup">

    <implementation>

      <method name="_openAutocompletePopup">
        <parameter name="aInput"/>
        <parameter name="aElement"/>
        <body><![CDATA[
          if (this.mPopupOpen) {
            return;
          }

          this.invalidate();
		  
		  var width = 300;

		  try{
			width = Math.round(document.getElementById("urlbar").getBoundingClientRect().width);
		  } catch(e){}
		  
		  this.setAttribute("width", width);
		  
		  if(Services.prefs.getBranch("extensions.classicthemerestorer.").getBoolPref("urlresults")
			|| Services.prefs.getBranch("extensions.classicthemerestorer.").getBoolPref("cresultshcb")) {
		  
		    var height = 400;
			var cheight = Services.prefs.getBranch("extensions.classicthemerestorer.").getIntPref("cresultsh");
			
			// urlbars bottom position
			var urlbbotpos = document.getElementById("urlbar").boxObject.screenY + document.getElementById("urlbar").boxObject.height - window.screen.top;
			
			try{
			  if(document.getElementById("main-window").hasAttribute("inFullscreen"))
			    height = screen.height - urlbbotpos - 3;
			  else
			    height = screen.availHeight - urlbbotpos - 3;
				
			  if(document.getElementById('urlbar-container').parentNode.parentNode.id=="browser-bottombox")
			    height = document.getElementById("main-window").boxObject.height
						 - document.getElementById("navigator-toolbox").boxObject.height
						 - document.getElementById("browser-bottombox").boxObject.height;
	
			} catch(e){}
			
			this.removeAttribute("height");
			
			if (Services.prefs.getBranch("extensions.classicthemerestorer.").getBoolPref("cresultshcb")) {
				if (cheight < height) {
				  this.setAttribute("maxheight", cheight);
				} else {
				  this.setAttribute("maxheight", height);
				}
			} else {
			  this.setAttribute("maxheight", height);
			}

		  }
  
		  // if CTRs movable location bar is on a bottom toolbar, open autocomplete popup above location bar
		  if(document.getElementById('urlbar-container').parentNode.parentNode.id=="browser-bottombox")
		    this.openPopup(aElement, "before_end", 0, 0, false, false);
		  else
            this.openPopup(aElement, "after_start", 0, -1, false, false);
        ]]></body>
      </method>

    </implementation>

  </binding>

  <binding id="autocomplete-richlistitem" extends="chrome://global/content/bindings/autocomplete.xml#autocomplete-richlistitem">

    <content align="start"
             onoverflow="this._onOverflow();"
             onunderflow="this._onUnderflow();">
	  <xul:hbox>
		  <xul:hbox align="center">
			  <xul:image anonid="site-icon"
						 class="ac-site-icon"
						 xbl:inherits="src=image,selected"/>
			  <xul:hbox class="ac-title"
						align="center"
						xbl:inherits="selected">
				<xul:description class="ac-text-overflow-container">
				  <xul:description anonid="title-text"
								   class="ac-title-text"
								   xbl:inherits="selected"/>
				</xul:description>

			  </xul:hbox>
			  <xul:hbox anonid="tags"
						class="ac-tags"
						align="center"
						xbl:inherits="selected">
				<xul:description class="ac-text-overflow-container">
				  <xul:description anonid="tags-text"
								   class="ac-tags-text"
								   xbl:inherits="selected"/>
				</xul:description>
			  </xul:hbox>
		  </xul:hbox>
		  <xul:spacer flex="1" id="ibox-spacer"/>
		  <xul:hbox align="end" id="ibox-box">
				<xul:image anonid="type-icon"
						 class="ac-type-icon"
						 xbl:inherits="selected,current"/>
		</xul:hbox>
	  </xul:hbox>
	  <xul:hbox align="center">
		  <xul:hbox anonid="separator"
					class="ac-separator"
					align="center"
					xbl:inherits="selected,actiontype">
			<xul:description class="ac-separator-text">â€”</xul:description>
		  </xul:hbox>
		  <xul:hbox class="ac-url"
					align="center"
					xbl:inherits="selected,actiontype">
			<xul:description class="ac-text-overflow-container">
			  <xul:description anonid="url-text"
							   class="ac-url-text"
							   xbl:inherits="selected"/>
			</xul:description>
		  </xul:hbox>
		  <xul:hbox class="ac-action"
					align="center"
					xbl:inherits="selected,actiontype">
			<xul:description class="ac-text-overflow-container">
			  <xul:description anonid="action-text"
							   class="ac-action-text"
							   xbl:inherits="selected"/>
			</xul:description>
		  </xul:hbox>
	  </xul:hbox>
    </content>

    <implementation implements="nsIDOMXULSelectControlItemElement">

      <method name="_handleOverflow">
        <body><![CDATA[
          let itemRect = this.parentNode.getBoundingClientRect();
          let titleRect = this._titleText.getBoundingClientRect();
          let tagsRect = this._tagsText.getBoundingClientRect();
          let separatorRect = this._separator.getBoundingClientRect();
          let urlRect = this._urlText.getBoundingClientRect();
          let actionRect = this._actionText.getBoundingClientRect();
          let separatorURLActionWidth =
            separatorRect.width + Math.max(urlRect.width, actionRect.width);

          // Total width for the title and URL/action is the width of the item
          // minus the start of the title text minus a little extra padding.
          // This extra padding amount is basically arbitrary but keeps the text
          // from getting too close to the popup's edge.
          let extraPadding = 30;
          let dir = this.getAttribute("dir");
          let titleStart = dir == "rtl" ? itemRect.right - titleRect.right
                                        : titleRect.left - itemRect.left;
          let itemWidth = itemRect.width - titleStart - extraPadding;

          if (this._tags.hasAttribute("empty")) {
            tagsRect.width = 0;
          }

          let titleTagsWidth = titleRect.width + tagsRect.width;
          if (titleTagsWidth + separatorURLActionWidth > itemWidth) {

            // The percentage of the item width allocated to the title and tags.
            let titleTagsPct = 0.66;

            let titleTagsAvailable = itemWidth - separatorURLActionWidth;
            let titleTagsMaxWidth = Math.max(
              titleTagsAvailable,
              itemWidth * titleTagsPct
            );
            if (titleTagsWidth > titleTagsMaxWidth) {
              let titlePct = 0.33;

              let titleAvailable = titleTagsMaxWidth - tagsRect.width;
              let titleMaxWidth = Math.max(
                titleAvailable,
                titleTagsMaxWidth * titlePct
              );
              let tagsAvailable = titleTagsMaxWidth - titleRect.width;
              let tagsMaxWidth = Math.max(
                tagsAvailable,
                titleTagsMaxWidth * (1 - titlePct)
              );
              this._titleText.style.maxWidth = (-62 + itemRect.width) + "px";
              this._tagsText.style.maxWidth = tagsMaxWidth + "px";
            }

            let titleMaxWidth = Math.max(
              (titleTagsMaxWidth - tagsRect.width),
              titleTagsMaxWidth * 0.33
            );

            this._urlText.style.maxWidth = (-62 + itemRect.width) + "px";
            this._actionText.style.maxWidth = (-62 + itemRect.width) + "px";
          }
        ]]></body>
      </method>

 	</implementation>

  </binding>

</bindings>